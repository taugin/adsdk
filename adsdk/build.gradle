apply plugin: 'com.android.library'

apply plugin: 'stringfog'
stringfog {
    // 这是加解密 key，可以自由定义。
//    def random = ["a", "b", "c", "d", "e", "f", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
//    Collections.shuffle(random)
//    key random.join()
    key "abmodule-" + getConfigKey()
    println "fogkey : " + key
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    // fogPackages = ['com.xxx.xxx']
}

static def getConfigKey() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return String.valueOf(("admodule-" + formattedDate).hashCode())
}

def isSnapshot = true
def baseVersion = '3.0.5'
android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionName baseVersion + (isSnapshot ? "-SNAPSHOT" : "")
        consumerProguardFiles 'proguard-rules-adsdk.pro'
        flavorDimensions "version"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            println("output : " + output.toString())
        }
    }
    publishNonDefault true //注意，这里的配置是为了去除gradle对library module默认只编译release buildType的限制
    productFlavors {
        version0 {
            dimension "version"
            versionName baseVersion + (isSnapshot ? "-SNAPSHOT" : "")
            resValue "string", "version_name", versionName
        }
        version1 {
            dimension "version"
            versionName baseVersion + ".1" + (isSnapshot ? "-SNAPSHOT" : "")
            resValue "string", "version_name", versionName
        }
        version2 {
            dimension "version"
            versionName baseVersion + ".2" + (isSnapshot ? "-SNAPSHOT" : "")
            resValue "string", "version_name", versionName
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation('com.facebook.android:audience-network-sdk:5.8.0')
    // MoPub
    implementation('com.mopub:mopub-sdk:5.12.0@aar') {
        transitive = true
        exclude module: 'libAvid-mopub' // To exclude AVID
        exclude module: 'moat-mobile-app-kit'
        exclude group: 'androidx.fragment'
        exclude group: 'androidx.core'
    }
    // admob
    implementation 'com.google.android.gms:play-services-ads:18.0.0'
    // stringfog
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'
    // firebase
    implementation 'com.google.firebase:firebase-core:17.0.0'
    implementation 'com.google.firebase:firebase-config:18.0.0'
}

// 发布aar
/*
apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            def url_release = "https://repo.rdc.aliyun.com/repository/130320-release-ATpVKH/"
            def url_snapshot = "https://repo.rdc.aliyun.com/repository/130320-snapshot-FOUUZY/"
            def username = "CP751G"
            def password = "TaMWu1x2fG"
            repository(url: isSnapshot ? url_snapshot : url_release) {
                authentication(userName: username, password: password)
            }
            pom.version = android.defaultConfig.versionName
            pom.artifactId = "adsdk"
            pom.groupId = "com.hauyu"
            pom.packaging = "aar"
        }

    }
}
*/

apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            android.libraryVariants.all { variant ->
                if (variant.name.contains("Release")) {
                    "maven${variant.name.capitalize()}Aar"(MavenPublication) {
                        def taskName = "bundle${variant.name.capitalize()}Aar"
                        println "taskName : " + taskName
                        artifact tasks.findByName(taskName)
                        groupId 'com.hauyu'
                        artifactId 'adsdk'
                        version variant.productFlavors[0].versionName
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                                if (dp.version != "unspecified") { // 过滤项目内library引用
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dp.group)
                                    dependencyNode.appendNode('artifactId', dp.name)
                                    dependencyNode.appendNode('version', dp.version)

                                    // for exclusions
                                    if (dp.excludeRules.size() > 0) {
                                        def exclusions = dependencyNode.appendNode('exclusions')
                                        dp.excludeRules.each { ExcludeRule ex ->
                                            def exclusion = exclusions.appendNode('exclusion')
                                            exclusion.appendNode('groupId', ex.group != null ? ex.group : "*")
                                            exclusion.appendNode('artifactId', ex.module)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }
        repositories {
            def url_release = "https://packages.aliyun.com/maven/repository/2017289-release-sRvHjt/"
            def url_snapshot = "https://packages.aliyun.com/maven/repository/2017289-snapshot-sJZcRc/"
            maven {
                url isSnapshot ? url_snapshot : url_release
                credentials {
                    username = "5ef3647994513bd170c627be"
                    password = "xcgJSde4Zuo4"
                }
            }
        }
        /*
        repositories2 {
            def url_release = "https://repo.rdc.aliyun.com/repository/130320-release-ATpVKH/"
            def url_snapshot = "https://repo.rdc.aliyun.com/repository/130320-snapshot-FOUUZY/"
            maven {
                url isSnapshot ? url_snapshot : url_release
                credentials {
                    username = "CP751G"
                    password = "TaMWu1x2fG"
                }
            }
        }*/
    }
}
