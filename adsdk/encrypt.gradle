import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
/**
 * 首字母转大写
 * @param s
 * @return
 */
def toUpperCaseFirstOne(String s) {
    if (s == null) {
        return null
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    }
    return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
}

try {
    project.rootProject.allprojects.repositories.each {
        repo ->
            repo.maven {
                r ->
                    r.url = "https://repo1.maven.org/maven2/"
            }
            repo.maven {
                r ->
                    r.url = "http://jcenter.bintray.com/"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/public"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/google"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/central"
            }
            repo.maven {
                r ->
                    r.url = "https://repo.rdc.aliyun.com/repository/130320-release-ATpVKH/"
                    r.credentials.username = "CP751G"
                    r.credentials.password = "TaMWu1x2fG"

            }
            repo.maven {
                r ->
                    r.url = "https://repo.rdc.aliyun.com/repository/130320-snapshot-FOUUZY/"
                    r.credentials.username = "CP751G"
                    r.credentials.password = "TaMWu1x2fG"

            }
            repo.maven {
                r ->
                    r.url = "https://packages.aliyun.com/maven/repository/2017289-release-sRvHjt/"
                    r.credentials.username = "5ef3647994513bd170c627be"
                    r.credentials.password = "xcgJSde4Zuo4"

            }
            repo.maven {
                r ->
                    r.url = "https://packages.aliyun.com/maven/repository/2017289-snapshot-sJZcRc/"
                    r.credentials.username = "5ef3647994513bd170c627be"
                    r.credentials.password = "xcgJSde4Zuo4"

            }
            repo.maven {
                r ->
                    r.url = "https://taugin.gitee.io/werepo"
            }
    }
    project.rootProject.buildscript.repositories.each {
        repo ->
            repo.maven {
                r ->
                    r.url = "https://repo1.maven.org/maven2/"
            }
            repo.maven {
                r ->
                    r.url = "http://jcenter.bintray.com/"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/public"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/google"
            }
            repo.maven {
                r ->
                    r.url = "https://maven.aliyun.com/repository/central"
            }
    }
} catch (Exception e) {
}

project.afterEvaluate {
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)
            String taskName = String.format("transformResourcesWithMergeJavaResFor%sRelease", productFlavor)
            def rTask = project.tasks.findByName(taskName)
            if (rTask != null) {
                String encryptTaskName = String.format("encrypt%sRelease", productFlavor)
                project.tasks.create(encryptTaskName, {
                    doLast {
                        encryptAssetsFiles(flavor.name)
                    }
                })
                rTask.dependsOn encryptTaskName

                String adFileGenerate = String.format("adFileGenerate%s", productFlavor)
                project.tasks.create(adFileGenerate, {
                    doLast {
                        adFileGenerateByUser(Flavor.name)
                    }
                })
            }
            String assembleTaskName = String.format("assemble%sRelease", productFlavor)
            def aTask = project.tasks.findByName(assembleTaskName);
            if (aTask != null) {
                aTask.doLast {
                    generateMultipleChannel(flavor)
                    openReleaseDir(flavor.name)
                    printEncryptInfo()
                }
            }
        }
    } else { // 无产品风味
        def rTask = project.tasks.findByName("transformResourcesWithMergeJavaResForRelease")
        if (rTask != null) {
            String encryptRelease = "encryptRelease"
            project.tasks.create(encryptRelease, {
                doLast {
                    encryptAssetsFiles(null)
                }
            })
            rTask.dependsOn encryptRelease
        }
        def aTask = project.tasks.findByName("assembleRelease");
        if (aTask != null) {
            aTask.doLast {
                generateMultipleChannel(null)
                openReleaseDir(null)
                printEncryptInfo()
            }
        }

        project.tasks.create("adFileGenerate", {
            doLast {
                adFileGenerateByUser(null)
            }
        })
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant != null && variant.buildType.name == 'release') {
                def flavorObj = variant.productFlavors[0]
                parseChannelConfig(flavorObj, outputFile)
            }
        }
    }
}

def getSuffix1() {
    return ".dat"
}

def getSuffix2() {
    return ".json"
}

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}
ext.out = []
def printEncryptInfo() {
    println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    ext.out.each {
        println "> Task " + it
    }
    ext.out = []
    println "==========================================================================="
    println "==========================================================================="
    println "==========================================================================="
}
/**
 * 打开Release目录
 * @param flavor
 * @return
 */
def openReleaseDir(flavor) {
    if (!isWindows() || !ext.has("openRelease") || ext["openRelease"] != true) {
        return
    }
    try {
        def outputDir = String.format("outputs/apk/%srelease", ((flavor != null && flavor.trim().length() > 0) ? flavor + "/" : ""))
        def outputPath = new File(project.buildDir, outputDir)
        def cmd = "explorer.exe " + outputPath
        cmd.execute()
        println "> Task  :${project.name}:openReleaseDir [${outputPath}]"
    } catch (Exception e) {
    }
}

/**
 * 获取applicationId
 * @param flavor
 * @return
 */
def getApplicationId(flavor) {
    if (flavor == null || flavor.trim().length() == 0) {
        return project.android.defaultConfig.applicationId
    }
    def productFlavor = project.android.productFlavors[flavor]
    if (productFlavor.applicationId == null) {
        return project.android.defaultConfig.applicationId
    }
    return productFlavor.applicationId
}

/**
 * 获取assets输出目录
 * @param flavor
 * @return
 */
def getAssetsOutDir(flavor) {
    def productFlaver = toUpperCaseFirstOne(flavor)
    def flavorNoSlash = productFlaver == null ? "" : productFlaver;
    def outAssetsDir = String.format("intermediates/assets/%s/release", flavorNoSlash)
    def mergeAssetsDir = String.format("intermediates/merged_assets/%srelease/merge%sReleaseAssets/out", flavorNoSlash, flavorNoSlash)
    def mergeAssetsDir2 = String.format("intermediates/merged_assets/%srelease/out", flavorNoSlash, flavorNoSlash)
    outAssetsDir = new File(project.getBuildDir(), outAssetsDir)
    mergeAssetsDir = new File(project.getBuildDir(), mergeAssetsDir)
    mergeAssetsDir2 = new File(project.getBuildDir(), mergeAssetsDir2)
    if (outAssetsDir.exists()) {
        return outAssetsDir
    }
    if (mergeAssetsDir.exists()) {
        return mergeAssetsDir
    }
    if (mergeAssetsDir2.exists()) {
        return mergeAssetsDir2
    }
    return null
}

/**
 * 生成包名对应的广告配置文件名称
 * @param flavor
 * @return
 */
def adFileGenerateByUser(flavor) {
    def appId = getApplicationId(flavor)
    def pkgnameMd5 = Aes.string2MD5(appId)
    def adConfigName = "cfg" + pkgnameMd5.substring(0, 8) + ".[dat/json]"
    println "generateAdFileName : " + adConfigName
}

/**
 * 获取广告配置文件名称
 * @param assetsDir
 * @param appId
 * @return
 */
def getAdConfigFile(assetsDir, appId) {
    def pkgnameMd5 = Aes.string2MD5(appId)
    def adConfigName = "cfg" + pkgnameMd5.substring(0, 8)
    def adDefaultName = "data_config"
    def adConfigFile1 = new File(assetsDir, adConfigName + getSuffix1())
    def adConfigFile2 = new File(assetsDir, adConfigName + getSuffix2())
    def adDefaultFile1 = new File(assetsDir, adDefaultName + getSuffix1())
    def adDefaultFile2 = new File(assetsDir, adDefaultName + getSuffix2())
    if (adConfigFile1.exists()) {
        return adConfigFile1.getAbsolutePath()
    }
    if (adConfigFile2.exists()) {
        return adConfigFile2.getAbsolutePath()
    }
    if (adDefaultFile1.exists()) {
        return adDefaultFile1.getAbsolutePath()
    }
    if (adDefaultFile2.exists()) {
        return adDefaultFile2.getAbsolutePath()
    }
    return null
}

/**
 * 获取待加密的文件树
 * @param assetDir
 * @return
 */
def getEncryptFileTree(assetDir) {
    def output = ext != null && ext.has("encryptFiles") ? ext.encryptFiles : null
    FileTree mainTree = fileTree(dir: assetDir)
    if (output != null) {
        output.each {
            out ->
                mainTree.include out
        }
    }
    mainTree.include("mdncfg")
    return mainTree
}

/**
 * 生成签名的md5文件，一边验证是否被重打包
 * @param assetDir
 */
def generateSignMd5(flavor, assetDir) {
    def signConfig = getSignConfig(flavor)
    def signMd5 = null
    if (signConfig != null && signConfig.hasProperty("storeFile") && signConfig.hasProperty("storePassword")) {
        def cmdString = String.format("keytool -v -list -keystore %s -storepass %s", signConfig.storeFile, signConfig.storePassword)
        def result = cmdString.execute().text.trim()
        BufferedReader br = new BufferedReader(new StringReader(result))
        try {
            while ((line = br.readLine()) != null) {
                if (line.trim().startsWith("MD5:") || line.trim().startsWith("md5:")) {
                    signMd5 = line.trim().substring("MD5:".length()).trim()
                    break
                }
            }
        } catch (Exception e) {
        }
    }
    if (signMd5 != null && signMd5.trim().length() > 0) {
        signMd5 = signMd5.replaceAll(":", "")
        signMd5 = signMd5.toLowerCase()
    }
    println "> Task  :${project.name}:signMd5 [${signMd5}]"
    return null
}

/**
 * 加密asset文件
 * @param flavor
 * @return
 */
def encryptAssetsFiles(flavor) {
    def secret = ext != null && ext.has("secret") ? ext["secret"] : "123456789"
    def appId = getApplicationId(flavor)
    def assetDir = getAssetsOutDir(flavor)
    if (assetDir == null) {
        System.err.println("[ERROR] Can not find the output Asset Dir");
        return;
    }
    def signFile = generateSignMd5(flavor, assetDir)
    def adFilePath = getAdConfigFile(assetDir, appId);
    def mainTree = getEncryptFileTree(assetDir)
    // println "flavor     : " + flavor
    // println "appId      : " + appId
    // println "secret     : " + secret
    // println "assetDir   : " + assetDir
    if (Aes.isJson(adFilePath)) {
        try {
            Aes.encryptFile(adFilePath, secret)
            println "> Task  :${project.name}:encryptAdFile    [${adFilePath}]"
            ext.out += ":${project.name}:encryptAdFile    [${adFilePath}]"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
    try {
        if (adFilePath != null && adFilePath.endsWith(getSuffix2())) {
            def adFile = new File(adFilePath)
            def filePath = adFile.getParent()
            def fileName = adFile.getName()
            fileName = fileName.replaceAll(getSuffix2(), getSuffix1())
            def newAdFile = new File(filePath, fileName)
            println "> Task  :${project.name}:renameAdFile     [${newAdFile}]"
            ext.out += ":${project.name}:renameAdFile     [${newAdFile}]"
            if (newAdFile.exists()) {
                newAdFile.delete()
            }
            adFile.renameTo(newAdFile)
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    if (mainTree != null) {
        mainTree.each { File file ->
            println "> Task  :${project.name}:encryptExtraFile [${file}]"
            ext.out += ":${project.name}:encryptExtraFile [${file}]"
            try {
                Aes.encryptFile(file.getAbsolutePath(), secret)
            } catch (Exception e) {
                e.printStackTrace()
            }
        }
    }
}
////////////////////////////////////////////////////////////////////////////
/**
 * 获取当前时间
 * @return
 */
static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
/**
 * 生成多渠道包
 * @param flavor
 * @return
 */
def generateMultipleChannel(flavor) {
    def flavorName = "official"
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : null
    def channelFileName = android.defaultConfig.ext.has("channel_file_name") ? android.defaultConfig.ext.channel_file_name : null
    def channels_files = null
    if (flavor != null) {
        flavorName = flavor.name
        if (flavor.ext != null && flavor.ext.has("app_channels") && flavor.ext.app_channels != null) {
            channels = flavor.ext.app_channels
        }
        if (flavor.ext != null && flavor.ext.has("app_channels_files") && flavor.ext.app_channels_files != null) {
            channels_files = flavor.ext.app_channels_files
        }
        if (flavor.ext != null && flavor.ext.has("channel_file_name") && flavor.ext.channel_file_name != null) {
            channelFileName = flavor.ext.channel_file_name
        }
    } else {
        channels_files = android.defaultConfig.ext.has("app_channels_files") ? android.defaultConfig.ext.app_channels_files : null
    }
    if (channels == null || channels.isEmpty()) {
        System.err.println ":${project.name}:generateMultipleChannel [" + flavorName + "] Channel Config is Empty"
        return
    }
    if (channels_files == null || channels_files.isEmpty()) {
        System.err.println ":${project.name}:generateMultipleChannel [" + flavorName + "] Channel Files is Empty"
        return
    }
    def aaptFile = getAaptFile()
    println ":${project.name}:appendChannelFile [" + flavorName + "] AaptFile : " + aaptFile
    if (!new File(aaptFile).exists()) {
        System.err.println ":${project.name}:appendChannelFile [" + flavorName + "] AaptFile is not exist"
        return
    }
    // 循环检测源文件是否存在，检测时间为5s内
    def basePackage = channels_files["base_package"]
    if (basePackage == null) {
        System.err.println ":${project.name}:appendChannelFile [" + flavorName + "] Base Package is Null"
        return
    }
    def startTime = System.currentTimeMillis()
    for (; ;) {
        File baseApk = new File(basePackage)
        def exist = baseApk.exists();
        if (!exist && System.currentTimeMillis() <= startTime + 5000) {
            sleep(1000)
        } else {
            break;
        }
    }
    File sourceFile = new File(basePackage)
    if (!sourceFile.exists()) {
        System.err.println ":${project.name}:generateMultipleChannel [" + flavorName + "] Base Package is not exist"
        return
    }
    String releaseDir = new File(basePackage).getParent()
    File tempAssets = new File(releaseDir, "assets")
    if (!tempAssets.exists()) {
        tempAssets.mkdirs()
    }
    if (channelFileName == null) {
        channelFileName = "product_channel_cfg"
    }
    File channelFile = new File(tempAssets, channelFileName)
    println ":${project.name}:generateMultipleChannel [" + flavorName + "] All Channels : " + channels
    println ":${project.name}:generateMultipleChannel [" + flavorName + "] All Channels Files : " + channels_files
    channels.each {
        appendChannelFile(basePackage, it, channels_files[it], channelFile, flavorName, aaptFile, channelFileName)
        if (deleteOldSign(flavorName, channels_files[it])) {
            signChannelPackage(flavorName, channels_files[it])
        }
    }
    println ":${project.name}:generateMultipleChannel [" + flavorName + "] Delete Channel File : " + channelFile
    channelFile.delete()
    tempAssets.delete()
}

/**
 * 增加渠道文件到assets目录，渠道文件名称为assets/product_channel_cfg
 * @param baseApk
 * @param channel
 * @param channelApk
 * @param channelFile
 * @param flavorName
 * @param aaptFile
 * @return
 */
def appendChannelFile(baseApk, channel, channelApk, channelFile, flavorName, aaptFile, channelFileName) {
    println ":${project.name}:appendChannelFile [" + flavorName + "] Base Apk : " + baseApk
    println ":${project.name}:appendChannelFile [" + flavorName + "] Channel : " + channel
    println ":${project.name}:appendChannelFile [" + flavorName + "] Channel Apk : " + channelApk
    FileWriter writer = new FileWriter(channelFile, false)
    writer.write(channel)
    writer.close()
    java.nio.file.Files.copy(java.nio.file.Paths.get(baseApk), java.nio.file.Paths.get(channelApk))
    def appendFileToApk = aaptFile + " a -v " + channelApk + " " + "assets/" + channelFileName
    def cwd = new File(baseApk).getParentFile()
    println ":${project.name}:appendChannelFile [" + flavorName + "] cmd : " + appendFileToApk
    println ":${project.name}:appendChannelFile [" + flavorName + "] cwd : " + cwd
    try {
        appendFileToApk.execute(null, cwd)
        sleep(2000)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

/**
 * 解析渠道配置信息
 * @param flavorObj
 * @param outputFile
 * @return
 */
def parseChannelConfig(flavorObj, outputFile) {
    def flavorName = "official"
    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def appName = android.defaultConfig.ext.has("app_name") ? android.defaultConfig.ext.app_name : project.getRootProject().getName()
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : null
    def channels_files = null
    if (flavorObj != null) {
        flavorName = flavorObj.name
        if (flavorObj.versionName != null) {
            versionName = flavorObj.versionName
        }
        if (flavorObj.versionCode != null) {
            versionCode = flavorObj.versionCode
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_name") && flavorObj.ext.app_name != null) {
            appName = flavorObj.ext.app_name
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_channels") && flavorObj.ext.app_channels != null) {
            channels = flavorObj.ext.app_channels
        }
        channels_files = flavorObj.ext["app_channels_files"] = [:]
    } else {
        channels_files = android.defaultConfig.ext["app_channels_files"] = [:]
    }
    channels_files["base_package"] = outputFile.getAbsolutePath()
    channels.each {
        def tmpFile = appName + "_" + flavorName + "_" + it + "_v" + versionName + "_" + versionCode +
                '_release' + "_" + getDate() + '.apk'
        def releaseDir = outputFile.getParentFile().getAbsolutePath()
        channels_files[it] = new File(releaseDir, tmpFile).getAbsolutePath()
    }
    println ":${project.name}:parseChannelConfig [" + flavorName + "] All Channels : " + channels
    println ":${project.name}:parseChannelConfig [" + flavorName + "] All Channels Files : " + channels_files
    /*
    ////////////////////////////////////////////////////////////////////////////
    String releaseDir = new File(channels_files["official"]).getParent()
    File tempAssets = new File(releaseDir, "assets")
    if (!tempAssets.exists()) {
        tempAssets.mkdirs()
    }
    File channelFile = new File(tempAssets, "product_channel_cfg")
    channels.each {
        appendChannelFile(channels_files["official"], it, channels_files[it], channelFile)
    }
    channelFile.delete()
    tempAssets.delete()
    ////////////////////////////////////////////////////////////////////////////
     */
}

/**
 * 删除旧的签名
 * @param flavor
 * @param apkFile
 * @return
 */
def deleteOldSign(flavor, apkFile) {
    def aaptFile = getAaptFile()
    println ":${project.name}:appendChannelFile [" + flavor + "] AaptFile : " + aaptFile
    if (!new File(aaptFile).exists()) {
        System.err.println ":${project.name}:appendChannelFile [" + flavor + "] AaptFile is not exist"
        return false
    }
    def oldSignFileList = getOldApkSignFile(apkFile)
    println ":${project.name}:deleteOldSign [" + flavor + "] oldSignFileList : " + oldSignFileList
    if (oldSignFileList == null || oldSignFileList.isEmpty()) {
        System.err.println ":${project.name}:deleteOldSign [" + flavor + "] Old Sign File is Null"
        return false
    }
    oldSignFileList.each {
        def cmdList = aaptFile + " r -v " + apkFile + " " + it
        println ":${project.name}:deleteOldSign [" + flavor + "] Delete Sign File : " + cmdList
        cmdList.execute()
        sleep(500)
    }
    return true
}

/**
 * 获取旧的签名文件
 * @param apkFile
 * @return
 */
def getOldApkSignFile(apkFile) {
    def metaInfoList = []
    java.io.InputStream is = new java.io.BufferedInputStream(new java.io.FileInputStream(apkFile))
    java.util.zip.ZipInputStream zin = new java.util.zip.ZipInputStream(is)
    java.util.zip.ZipEntry ze = null
    while ((ze = zin.getNextEntry()) != null) {
        def name = ze.getName()
        if (name != null && name.startsWith("META-INF")) {
            if (name.endsWith(".MF") || name.endsWith(".SF") || name.endsWith(".RSA")) {
                metaInfoList.add(name)
            }
        }
    }
    zin.closeEntry()
    zin.close()
    return metaInfoList
}

/**
 * 对渠道包签名
 * @param flavor
 * @param apkFile
 * @return
 */
def signChannelPackage(flavor, apkFile) {
    def signConfig = getSignConfig(flavor)
    if (signConfig == null) {
        System.err.println ":${project.name}:signChannelPackage [" + flavor + "] signConfig is Null"
        return
    }
    def jarSignerFile = getJarsigner(flavor)
    println ":${project.name}:signChannelPackage [" + flavor + "] jarSignerFile : " + jarSignerFile
    if (jarSignerFile == null) {
        System.err.println ":${project.name}:signChannelPackage [" + flavor + "] jarSignerFile is Null"
        return
    }
    if (signConfig != null
            && signConfig.hasProperty("storeFile")
            && signConfig.hasProperty("storePassword")
            && signConfig.hasProperty("keyAlias")
            && signConfig.hasProperty("keyPassword")) {

        println ":${project.name}:signChannelPackage [" + flavor + "] Sign Apk : " + apkFile
        def cmdlist = []
        cmdlist.add(jarSignerFile)

        cmdlist.add("-digestalg")
        cmdlist.add("SHA1")
        cmdlist.add("-sigalg")
        cmdlist.add("MD5withRSA")
        // cmdlist.add("-tsa https://timestamp.geotrust.com/tsa")
        cmdlist.add("-keystore")
        cmdlist.add(signConfig.storeFile)
        cmdlist.add("-storepass")
        cmdlist.add(signConfig.storePassword)
        cmdlist.add("-keypass")
        cmdlist.add(signConfig.keyPassword)
        cmdlist.add("-signedjar")
        cmdlist.add(apkFile)
        cmdlist.add(apkFile)
        cmdlist.add(signConfig.keyAlias)

        def cmdString = cmdlist.join(" ")
        println ":${project.name}:signChannelPackage [" + flavor + "] Sign Apk Cmd : " + cmdString
        cmdString.execute()
    }
}

/**
 * 获取Jarsigner文件路径
 * @param flavor
 * @return
 */
def getJarsigner(flavor) {
    def jarSignerFile = null
    try {
        def cmdString = "where jarsigner"
        def result = cmdString.execute().text.trim()
        if (result != null && result.length() > 0) {
            BufferedReader br = new BufferedReader(new StringReader(result))
            def tmpFile = br.readLine()
            br.close()
            println ":${project.name}:getJarsigner [" + flavor + "] jarSignerFile : " + tmpFile
            File f = new File(tmpFile)
            if (f.exists()) {
                jarSignerFile = tmpFile
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return jarSignerFile
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getSignConfig(flavor) {
    def signConfig = null
    if (flavor != null) {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}

/**
 * 获取aapt文件路径
 * @return
 */
def getAaptFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null) {
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    println ":${project.name}:getAaptFile sdkDir : " + sdkDir
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def aaptFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "aapt" + exe
    println ":${project.name}:getAaptFile aaptFile : " + aaptFile
    return aaptFile
}
////////////////////////////////////////////////////////////////////////////
class Aes {
    private static void appendHex(StringBuffer paramStringBuffer, byte paramByte) {
        paramStringBuffer.append(
                "0123456789ABCDEF".charAt(0xF & paramByte >> 4)).append(
                "0123456789ABCDEF".charAt(paramByte & 0xF));
    }

    static String decrypt(String key, String content) {
        try {
            String str = new String(decrypt(getRawKey(key.getBytes()),
                    toByte(content)));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt error: " + localException);
        }
        return null;
    }

    static byte[] decrypt(byte[] key,
                          byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(2, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static String decryptRaw(String seed, byte[] content) {
        try {
            String str = new String(
                    decrypt(getRawKey(seed.getBytes()), content));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt raw error: " + localException);
        }
        return null;
    }

    static String encryptPublic(String key, String content) {
        try {
            byte[] result = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return toHex(result);
        } catch (Exception localException) {
        }
        return null;
    }

    private static byte[] encrypt(byte[] key,
                                  byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(1, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static byte[] encryptRaw(String key, String content) {
        try {
            byte[] arrayOfByte = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return arrayOfByte;
        } catch (Exception localException) {
            System.out.println("encrypt raw error: " + localException);
        }
        return null;
    }

    static String fromHex(String content) {
        return new String(toByte(content));
    }

    private static byte[] getRawKey(byte[] key) throws Exception {
        byte[] arrayOfByte = new byte[16];
        if (key == null)
            throw new IllegalArgumentException("seed == null");
        if (key.length == 0)
            throw new IllegalArgumentException("seed.length == 0");
        if (key.length < 16) {
            int i = 0;
            while (i < arrayOfByte.length) {
                if (i < key.length) {
                    arrayOfByte[i] = key[i];
                } else {
                    arrayOfByte[i] = 0;
                }
                i++;
            }
        }
        return arrayOfByte;
    }

    static byte[] toByte(String content) {
        int i = content.length() / 2;
        byte[] arrayOfByte = new byte[i];
        for (int j = 0; j < i; j++)
            arrayOfByte[j] = Integer.valueOf(
                    content.substring(j * 2, 2 + j * 2), 16).byteValue();
        return arrayOfByte;
    }

    static String toHex(String content) {
        return toHex(content.getBytes());
    }

    static String toHex(byte[] content) {
        if (content == null)
            return "";
        StringBuffer localStringBuffer = new StringBuffer(
                2 * content.length);
        for (int i = 0; i < content.length; i++)
            appendHex(localStringBuffer, content[i]);
        return localStringBuffer.toString();
    }

    private static String readFromFile(File f) {
        if (!f.exists()) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        try {
            byte[] buf = new byte[4096];
            int read = 0;
            FileInputStream fis = new FileInputStream(f);
            while ((read = fis.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            fis.close();
            return builder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    private static void writeToFile(File f, String out) {
        try {
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(out.getBytes());
            fos.close();
        } catch (Exception e) {
        }
    }

    private static void usage() {
        String usage = "java -jar aes.jar <-k rawkey> [-e/-d] [-i input] [-o output] [-s str]";
        System.out.println(usage);
    }

    private static boolean isEmpty(String str) {
        if (str == null || str.trim().equals("")) {
            return true;
        }
        return false;
    }

    static String readFromStream(InputStream is) {
        if (is == null) {
            return null;
        }
        try {
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            return builder.toString();
        } catch (Exception e) {
            e.printStackTrace()
        }
        return null;
    }

    static String readLocal(String filePath) {
        try {
            InputStream is = new FileInputStream(filePath);
            return readFromStream(is);
        } catch (Exception e) {
        }
        return null;
    }

    static boolean isJson(String file) {
        try {
            String s = readLocal(file)
            if (s != null) {
                s = s.trim()
            }
            if (s.startsWith("[") || s.startsWith("{")) {
                return true
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return false
    }

    static void encryptFile(String originFile, String secret) {
        try {
            String encrypt = encryptPublic(secret, readFromFile(new File(originFile))); //加密
            writeToFile(new File(originFile), encrypt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String byte2MD5(byte[] byteArray) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = md5Bytes[i] & 0xff;
            if (val < 16) {
                hexValue.append("0");
            }
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    static String string2MD5(String source) {
        return string2MD5(source, "utf-8");
    }

    static String string2MD5(String source, String encode) {
        try {
            return byte2MD5(source.getBytes(encode));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}