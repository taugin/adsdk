import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
import java.util.concurrent.TimeUnit
import java.util.zip.ZipEntry
import java.util.zip.ZipFile


/**
// 阿里云映射的maven仓库地址
maven { url 'https://maven.aliyun.com/repository/public' }
maven { url 'https://maven.aliyun.com/repository/central' }
maven { url 'https://maven.aliyun.com/repository/google' }
maven { url 'https://maven.aliyun.com/repository/jcenter' }
maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
maven { url 'https://maven.aliyun.com/repository/releases' }
maven { url 'https://adcolony.bintray.com/AdColony' }
maven { url 'https://jitpack.io' }
*/

/**
 * 首字母转大写
 * @param s
 * @return
 */
def toUpperCaseFirstOne(String s) {
    if (s == null) {
        return null
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    }
    return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
}

try {
    project.rootProject.allprojects.repositories.each {
        repo ->
            repo.maven {
                r ->
                    r.url = "https://repo.rdc.aliyun.com/repository/130320-release-ATpVKH/"
                    r.credentials.username = "CP751G"
                    r.credentials.password = "TaMWu1x2fG"

            }
            repo.maven {
                r ->
                    r.url = "https://repo.rdc.aliyun.com/repository/130320-snapshot-FOUUZY/"
                    r.credentials.username = "CP751G"
                    r.credentials.password = "TaMWu1x2fG"

            }
            repo.maven {
                r ->
                    r.url = "https://packages.aliyun.com/maven/repository/2017289-release-sRvHjt/"
                    r.credentials.username = "5ef3647994513bd170c627be"
                    r.credentials.password = "xcgJSde4Zuo4"

            }
            repo.maven {
                r ->
                    r.url = "https://packages.aliyun.com/maven/repository/2017289-snapshot-sJZcRc/"
                    r.credentials.username = "5ef3647994513bd170c627be"
                    r.credentials.password = "xcgJSde4Zuo4"

            }
            repo.maven {
                r ->
                    r.url = "https://taugin.gitee.io/werepo"
            }
    }
} catch (Exception e) {
}

class Global {
    static Map<String, String> flavorMap = new HashMap<String, String>()
    static def sAxmlEditorFilePath = null
    static def s7ZipCommandPath = null
    static def sAaptFile = null
    static def sJarSignerFile = null
}

def getAxmlGroupId() {
    return "cn.wjdiankong"
}

def getAxmlArtifactId() {
    return "axmleditor"
}

def getAxmlVersion() {
    return "1.0.3"
}

def getAxmlImplementation() {
    return getAxmlGroupId() + ":" + getAxmlArtifactId() + ":" + getAxmlVersion()
}

def getAxmlFileName() {
    return getAxmlArtifactId() + "-" + getAxmlVersion() + ".jar"
}

project.afterEvaluate {
    project.configurations.provided.setCanBeResolved(true)
    project.configurations.api.setCanBeResolved(true)
    project.dependencies.add("provided", getAxmlImplementation())
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)

            def encryptReleaseTask = project.tasks.create(String.format("encrypt%sRelease", productFlavor), {
                doFirst {
                    encryptAssetsFilesFromApk(flavor.name)
                }
            })
            def assembleReleaseTask = project.tasks.findByName(String.format("assemble%sRelease", productFlavor))
            def dependsOnList1 = assembleReleaseTask.getDependsOn()
            def dependsOnList2 = encryptReleaseTask.getDependsOn()
            dependsOnList2.clear()
            encryptReleaseTask.setDependsOn(dependsOnList1)
            assembleReleaseTask.dependsOn encryptReleaseTask

            assembleReleaseTask.doLast {
                openReleaseDir(flavor.name)
                printEncryptInfo()
            }

            String generateAdFile = String.format("generateAdFile%s", productFlavor)
            def generateAdFileTask = project.tasks.create(generateAdFile, {
                doLast {
                    generateAdFileByUser(Flavor.name)
                }
            })
            generateAdFileTask.setGroup("adsdk")
        }
    } else { // 无产品风味
        def encryptReleaseTask = project.tasks.create("encryptRelease", {
            doFirst {
                encryptAssetsFilesFromApk(null)
            }
        })
        def assembleReleaseTask = project.tasks.findByName("assembleRelease")
        def dependsOnList1 = assembleReleaseTask.getDependsOn()
        def dependsOnList2 = encryptReleaseTask.getDependsOn()
        dependsOnList2.clear()
        encryptReleaseTask.setDependsOn(dependsOnList1)
        assembleReleaseTask.dependsOn encryptReleaseTask

        assembleReleaseTask.doLast {
            openReleaseDir(null)
            printEncryptInfo()
        }

        def generateAdFileTask = project.tasks.create("generateAdFile", {
            doLast {
                generateAdFileByUser(null)
            }
        })
        generateAdFileTask.setGroup("adsdk")
    }

    def setHauYuLogVerboseTask = project.tasks.create("setHauYuLogVerbose", {
        doLast {
            setHauYuLogVerbose()
        }
    })

    setHauYuLogVerboseTask.setGroup("adsdk")

    def addDebugFileTask = project.tasks.create("addDebugFile", {
        doLast {
            addDebugFile()
        }
    })
    addDebugFileTask.setGroup("adsdk")
    def delDebugFileTask = project.tasks.create("delDebugFile", {
        doLast {
            delDebugFile()
        }
    })
    delDebugFileTask.setGroup("adsdk")

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                String key = null;
                if (variant.productFlavors != null && variant.productFlavors.size() > 0) {
                    key = variant.productFlavors[0].name
                } else {
                    key = ""
                }
                Global.flavorMap.put(key, outputFile)
            }
        }
    }
}

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

def printOutput(Process p) {
    println("+++++++++++++++++++++++++++++++++++++++++++")
    try {
        def line = null
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))
        while ((line = br.readLine()) != null) {
            println(line)
        }
        br.close()
        br = new BufferedReader(new InputStreamReader(p.getErrorStream()))
        while ((line = br.readLine()) != null) {
            println(line)
        }
        br.close()
    } catch (Exception e) {
        System.err.println("error : " + e)
    }
    println("-------------------------------------------")
}

def setHauYuLogVerbose() {
    def cmdString = "adb shell setprop log.tag.hauyu V"
    def process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    cmdString = "adb shell getprop log.tag.hauyu"
    process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    printOutput(process)
}

def addDebugFile() {
    def cmdString = "adb shell touch /sdcard/Download/.debug"
    def process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    cmdString = "adb shell ls -al /sdcard/Download/.debug"
    process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    printOutput(process)
}

def delDebugFile() {
    def cmdString = "adb shell rm /sdcard/Download/.debug"
    def process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    cmdString = "adb shell ls -al /sdcard/Download/.debug"
    process = cmdString.execute()
    process.waitFor(10, TimeUnit.SECONDS)
    printOutput(process)
}

ext.out = []

def printEncryptInfo() {
    println "\n>>>>>>>>>>>>>>>>>>>>>>>>>>处理的加密文件<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    ext.out.each {
        println "> Task " + it
    }
    ext.out = []
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>处理的加密文件<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
}
/**
 * 打开Release目录
 * @param flavor
 * @return
 */
def openReleaseDir(flavor) {
    if (!isWindows() || !ext.has("openRelease") || ext["openRelease"] != true) {
        return
    }
    try {
        def outputDir = String.format("outputs/apk/%srelease", ((flavor != null && flavor.trim().length() > 0) ? flavor + "/" : ""))
        def outputPath = new File(project.buildDir, outputDir)
        def cmd = "explorer.exe " + outputPath
        cmd.execute()
        println "> Task :${project.name}:openReleaseDir [${outputPath}]"
    } catch (Exception e) {
    }
}

/**
 * 获取applicationId
 * @param flavor
 * @return
 */
def getApplicationId(flavor) {
    if (flavor == null || flavor.trim().length() == 0) {
        return project.android.defaultConfig.applicationId
    }
    def productFlavor = project.android.productFlavors[flavor]
    if (productFlavor.applicationId == null) {
        return project.android.defaultConfig.applicationId
    }
    return productFlavor.applicationId
}

/**
 * 生成包名对应的广告配置文件名称
 * @param flavor
 * @return
 */
def generateAdFileByUser(flavor) {
    def appId = getApplicationId(flavor)
    def pkgnameMd5 = Aes.string2MD5(appId)
    def adConfigName = "cfg" + pkgnameMd5.substring(0, 8) + ".[dat/json]"
    println("+++++++++++++++++++++++++++++++++++++++++++")
    println "generateAdFileName : " + adConfigName
    println("-------------------------------------------")
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getSignConfig(flavor) {
    def signConfig = null
    if (flavor != null && flavor.trim().length() > 0) {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}

/**
 * 加密assets文件
 * @param flavorName
 * @param outputFile
 * @return
 */
def encryptAssetsFilesFromApk(flavor) {
    Global.sAxmlEditorFilePath = getAXMLEditJarFile()
    Global.s7ZipCommandPath = get7ZipCmd()
    Global.sAaptFile = getAaptFile()
    Global.sJarSignerFile = getJarSigner()
    if (Global.sAaptFile == null && Global.s7ZipCommandPath == null) {
        println "> Task :${project.name}:encryptAssetsFilesFromApk [aapt and 7z file is not exist, stop encrypt task]"
        return
    }
    if (Global.sJarSignerFile == null) {
        println "> Task :${project.name}:encryptAssetsFilesFromApk [jarsigner file is not exist, stop encrypt task]"
        return
    }
    def flavorName = flavor != null ? flavor : ""
    def outputFile = Global.flavorMap.get(flavorName)
    println "> Task :${project.name}:encryptAssetsFilesFromApk flavorName : " + flavorName
    println "> Task :${project.name}:encryptAssetsFilesFromApk outputFile : " + outputFile
    encryptAssetsFilesFromApkInternal(flavorName, outputFile)
}

/**
 * 加密assets文件
 * @param flavorName
 * @param outputFile
 * @return
 */
def encryptAssetsFilesFromApkInternal(flavorName, File outputFile) {
    def appId = getApplicationId(flavorName)
    def pkgmd5 = Aes.string2MD5(appId)
    def adname = "cfg" + pkgmd5.substring(0, 8)
    def encryptNames = []
    encryptNames.add(adname + ".dat")
    encryptNames.add(adname + ".json")
    encryptNames.add("data_config" + ".dat")
    encryptNames.add("data_config" + ".json")
    encryptNames.add("mdncfg")
    def configEncryptFiles = ext != null && ext.has("encryptFiles") ? ext.encryptFiles : null
    if (configEncryptFiles != null && !configEncryptFiles.isEmpty()) {
        configEncryptFiles.each {
            encryptNames.add(it)
        }
    }
    def workDir = outputFile.getParent()
    println "> Task :${project.name}:encryptRelease flavorName : " + flavorName
    println "> Task :${project.name}:encryptRelease appId : " + appId
    println "> Task :${project.name}:encryptRelease encryptNames : " + encryptNames
    println "> Task :${project.name}:encryptRelease workDir : " + workDir
    println "> Task :${project.name}:encryptRelease outputFile : " + outputFile

    // 读取待加密的文件到本地磁盘
    def encryptFiles = readEncryptFileFromApk(workDir, encryptNames, outputFile)

    println "> Task :${project.name}:encryptRelease encryptFiles : " + encryptFiles
    encryptFileForAssets(workDir, encryptFiles)
    updateEncryptFileToApk(workDir, encryptFiles, outputFile)
    deleteTempAssetsFile(workDir, encryptNames)
    signApkFilePackage(flavorName, outputFile)
}

/**
 * 从apk中拷贝待加密文件
 * @param workDir
 * @param encryptNames
 * @param outputFile
 * @return
 */
def readEncryptFileFromApk(workDir, encryptNames, outputFile) {
    def copyNames = []
    def assetsFolder = "assets";
    def assetsDir = new File(workDir, assetsFolder)
    assetsDir.mkdirs()
    encryptNames.each {
        def assetsFile = assetsFolder + "/" + it
        def content = readContentFromApk(outputFile, assetsFile)
        if (content != null && content.trim().length() > 0) {
            def outputFilePath = new File(assetsDir, it)
            copyNames.add(assetsFile)
            try {
                FileOutputStream fos = new FileOutputStream(outputFilePath)
                fos.write(content.getBytes())
                fos.close()
            } catch (Exception e) {
                e.printStackTrace()
            }
        }
    }
    return copyNames
}

/**
 * 对文件进行加密
 * @param workDir
 * @param encryptFiles
 * @return
 */
def encryptFileForAssets(workDir, encryptFiles) {
    def secret = ext != null && ext.has("secret") ? ext["secret"] : "123456789"
    encryptFiles.each {
        try {
            def srcFile = new File(workDir, it).getAbsolutePath()
            Aes.encryptFile(srcFile, secret)
            println "> Task :${project.name}:encryptAdFiles [${it}]"
            ext.out += ":${project.name}:encryptAdFiles [${it}]"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
    println ""
}

/**
 * 更新apk文件
 * @param workDir
 * @param encryptFiles
 * @param outputFile
 * @return
 */
def updateEncryptFileToApk(workDir, encryptFiles, outputFile) {
    deleteFilesFromApk(outputFile.getAbsolutePath(), encryptFiles)
    appendFilesIntoApk(workDir, outputFile.getAbsolutePath(), encryptFiles)
}

/**
 * 删除临时文件
 * @param workDir
 * @param encryptNames
 * @return
 */
def deleteTempAssetsFile(workDir, encryptNames) {
    def assetsFolder = "assets";
    def assetsDir = new File(workDir, assetsFolder)
    encryptNames.each {
        def outputFilePath = new File(assetsDir, it)
        outputFilePath.delete()
    }
    assetsDir.delete()
}


/**
 * 从apk中copy文件
 * @param inputFile
 * @param flavorName
 * @param filePath
 * @param outputPath
 * @param channel
 * @return
 */
def copyFileFromZipFile(inputFile, String filePath, String outputPath) {
    println ":${project.name}:copyFileFromZipFile From ZipFile [" + inputFile + "] copy [" + filePath + "] to " + "[" + outputPath + "]"
    def copyResult = false;
    try {
        ZipFile zipFile = new ZipFile(inputFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            FileOutputStream fos = new FileOutputStream(outputPath)
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                fos.write(buf, 0, read)
            }
            fos.close()
            is.close()
            zipFile.close()
            copyResult = true;
        } else {
            zipFile.close()
        }
    } catch (Exception e) {
        e.printStackTrace()
        copyResult = false;
    }
    return copyResult
}

/**
 * 获取axmleditor文件路径
 * @param flavorName
 * @param channel
 * @return
 */
def getAXMLEditJarFile() {
    def rootDir = getRootDir()
    def aXmlEditJarFile = new File(rootDir, "AXMLEditor.jar")
    if (aXmlEditJarFile.exists()) {
        return aXmlEditJarFile.getAbsolutePath()
    } else {
        System.err.println ":${project.name}:getAXMLEditorFile Can not find AXMLEditor.jar in [" + rootDir + "]"
    }
    aXmlEditJarFile = project.configurations.provided*.toURI().find {
        URI uri ->
            new File(uri).name == getAxmlFileName()
    }
    if (aXmlEditJarFile != null && new File(aXmlEditJarFile).exists()) {
        return new File(aXmlEditJarFile).getAbsolutePath()
    } else {
        System.err.println ":${project.name}:getAXMLEditorFile Can not find dependencies [provided '" + getAxmlImplementation() + "] in app.dependencies"
    }
    return null
}

def get7ZipCmd() {
    def axmlFile = Global.sAxmlEditorFilePath
    def platform = "windows"
    def ext = ".exe"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        platform = "windows"
        ext = ".exe"
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        platform = "linux"
        ext = ""
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        platform = "mac"
        ext = ""
    }
    def tempDir = System.getProperty("java.io.tmpdir")
    def fromPath = String.format(Locale.getDefault(), "7z/%s/7z%s", platform, ext)
    def destPath = new File(tempDir, fromPath).getAbsolutePath()
    def destFile = new File(destPath)
    destFile.getParentFile().mkdirs()
    def exist = destFile.exists()
    println ":${project.name}:get7ZipCmd axmlFile : " + axmlFile
    println ":${project.name}:get7ZipCmd fromPath : " + fromPath
    println ":${project.name}:get7ZipCmd destPath : " + destPath
    println ":${project.name}:get7ZipCmd 7z Exist : " + exist
    if (!exist) {
        def result = copyFileFromZipFile(axmlFile, fromPath, destPath)
        println ":${project.name}:get7ZipCmd Result : " + result
    }
    exist = destFile.exists()
    println ":${project.name}:get7ZipCmd 7z Exist : " + exist
    if (exist) {
        destFile.setExecutable(true, false);
        return destFile.getAbsolutePath()
    }
    return null
}

def getAppendCmdListByAapt(apkFile, aaptFile, fileList) {
    def cmd = []
    cmd.add(aaptFile)
    cmd.add("a")
    cmd.add("-v")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

def getAppendCmdListBy7z(apkFile, sevenZip, fileList) {
    def cmd = []
    cmd.add(sevenZip)
    cmd.add("a")
    cmd.add("-tzip")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}
/**
 * 添加文件到apk
 * @param workDir
 * @param apkFile
 * @param fileList
 * @return
 */
def appendFilesIntoApk(workDir, apkFile, fileList) {
    def sevenZip = Global.s7ZipCommandPath
    def aaptFile = Global.sAaptFile
    def cmd = []
    if (sevenZip != null && new File(sevenZip).exists()) {
        cmd = getAppendCmdListBy7z(apkFile, sevenZip, fileList)
    } else if (aaptFile != null) {
        cmd = getAppendCmdListByAapt(apkFile, aaptFile, fileList)
    }
    if (cmd == null || cmd.isEmpty()) {
        println ":${project.name}:appendFilesIntoApk Error [cmd is empty]"
        return
    }
    def cmdString = cmd.join(" ")
    println ":${project.name}:appendFilesIntoApk Command [" + optimizeCommand(cmdString) + "]"
    try {
        Process p = cmdString.execute(null, new File(workDir))
        p.waitFor(20, TimeUnit.SECONDS)
        printOutput(p)
        p.closeStreams()
        p.destroy();
    } catch (Exception e) {
        e.printStackTrace()
    }
}

def getDeleteCmdListByAapt(apkFile, aaptFile, fileList) {
    def cmd = []
    cmd.add(aaptFile)
    cmd.add("r")
    cmd.add("-v")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

def getDeleteCmdListBy7z(apkFile, sevenZip, fileList) {
    def cmd = []
    cmd.add(sevenZip)
    cmd.add("d")
    cmd.add("-tzip")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

/**
 * 从apk中删除文件
 * @param apkFile
 * @param fileList
 * @return
 */
def deleteFilesFromApk(apkFile, fileList) {
    def sevenZip = Global.s7ZipCommandPath
    def aaptFile = Global.sAaptFile
    def cmd = []
    if (sevenZip != null && new File(sevenZip).exists()) {
        cmd = getDeleteCmdListBy7z(apkFile, sevenZip, fileList)
    } else if (aaptFile != null) {
        cmd = getDeleteCmdListByAapt(apkFile, aaptFile, fileList)
    }
    if (cmd == null || cmd.isEmpty()) {
        println ":${project.name}:deleteFilesFromApk Error [cmd is empty]"
        return
    }
    def cmdList = cmd.join(" ")
    println ":${project.name}:deleteFilesFromApk Command [" + optimizeCommand(cmdList) + "]"
    try {
        def startTime = System.currentTimeMillis()
        Process p = cmdList.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        p.destroy()
        def endTime = System.currentTimeMillis()
        def signTime = (endTime - startTime) / 1000
        println ":${project.name}:deleteFilesFromApk Command [Delete File From Apk Use Time " + signTime + "s]"
    } catch (Exception e) {
    }
}

/**
 * 为apk包签名
 * @param flavorName
 * @param apkFile
 * @param channel
 * @return
 */
def signApkFilePackage(flavorName, apkFile) {
    println "\n> Task :${project.name}:signApkFilePackage [" + flavorName + "] >>>>>>>>> Sign Channel File Start <<<<<<<<<"
    def signConfig = getSignConfig(flavorName)
    if (signConfig == null) {
        System.err.println "> Task :${project.name}:signApkFilePackage [" + flavorName + "] signConfig is Null"
        return
    }
    if (!signConfig.hasProperty("storeFile")
            || !signConfig.hasProperty("storePassword")
            || !signConfig.hasProperty("keyAlias")
            || !signConfig.hasProperty("keyPassword")) {
        System.err.println "> Task :${project.name}:signApkFilePackage [" + flavorName + "][" + channel + "] signConfig is not completion"
        return
    }
    if (deleteOldSignFiles(apkFile)) {
        signApkFilePackageLocked(apkFile, signConfig)
    }
    println "> Task :${project.name}:signApkFilePackage [" + flavorName + "] >>>>>>>>> Sign Channel File Complete <<<<<<<<<"
}

/**
 * 删除旧的签名
 * @param apkFile
 * @param channel
 * @return
 */
def deleteOldSignFiles(apkFile) {
    def signInfoList = readOldSignedFiles(apkFile)
    println "> Task :${project.name}:deleteOldSignFiles AllFile " + signInfoList
    if (signInfoList == null || signInfoList.isEmpty()) {
        return true
    }
    deleteFilesFromApk(apkFile, signInfoList)
    return true
}

/**
 * 获取旧的签名文件
 * @param apkFile
 * @return
 */
def readOldSignedFiles(apkFile) {
    def list = []
    try {
        ZipFile zipFile = new ZipFile(apkFile)
        Enumeration<? extends ZipEntry> entries = zipFile.entries()
        while (entries.hasMoreElements()) {
            def name = entries.nextElement().getName()
            if (name != null && name.startsWith("META-INF") && (name.endsWith(".MF") || name.endsWith(".SF") || name.endsWith(".RSA"))) {
                list.add(name)
            }
        }
        zipFile.close()
    } catch (IOException e) {
        e.printStackTrace()
    }
    return list
}

/**
 * 对apk包签名
 * @param apkFile
 * @param signConfig
 * @param jarSignerFile
 * @param channel
 * @return
 */
def signApkFilePackageLocked(apkFile, signConfig) {
    def jarSignerFile = Global.sJarSignerFile
    if (jarSignerFile == null) {
        System.err.println "> Task :${project.name}:signApkFilePackage jarSignerFile is Null"
        return
    }
    if (signConfig != null
            && signConfig.hasProperty("storeFile")
            && signConfig.hasProperty("storePassword")
            && signConfig.hasProperty("keyAlias")
            && signConfig.hasProperty("keyPassword")) {
        println "> Task :${project.name}:signApkFilePackage ApkFile [" + apkFile + "]"
        def cmdlist = []
        cmdlist.add(jarSignerFile)

        cmdlist.add("-digestalg")
        cmdlist.add("SHA1")
        cmdlist.add("-sigalg")
        cmdlist.add("MD5withRSA")
        // cmdlist.add("-tsa https://timestamp.geotrust.com/tsa")
        cmdlist.add("-keystore")
        cmdlist.add(signConfig.storeFile)
        cmdlist.add("-storepass")
        cmdlist.add(signConfig.storePassword)
        cmdlist.add("-keypass")
        cmdlist.add(signConfig.keyPassword)
        cmdlist.add("-signedjar")
        cmdlist.add(apkFile)
        cmdlist.add(apkFile)
        cmdlist.add(signConfig.keyAlias)

        def cmdString = cmdlist.join(" ")
        def cmdStringInfo = cmdlist.join(",")
        println "> Task :${project.name}:signApkFilePackage Command [" + optimizeCommand(cmdStringInfo, ",") + "]"
        try {
            def startTime = System.currentTimeMillis()
            Process p = cmdString.execute()
            p.waitFor(20, TimeUnit.SECONDS)
            p.destroy();
            def endTime = System.currentTimeMillis()
            def signTime = (endTime - startTime) / 1000
            println "> Task :${project.name}:signApkFilePackage Command [Sign Apk File Use Time " + signTime + "s]"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

/**
 * 获取Jarsigner文件路径
 * @param flavorName
 * @param channel
 * @return
 */
def getJarSigner() {
    def jarSignerFile = null
    try {
        def cmdString = "which jarsigner"
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            cmdString = "where jarsigner"
        }
        def result = cmdString.execute().text.trim()
        if (result != null && result.length() > 0) {
            BufferedReader br = new BufferedReader(new StringReader(result))
            def tmpFile = br.readLine()
            br.close()
            File f = new File(tmpFile)
            if (f.exists()) {
                jarSignerFile = tmpFile
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return jarSignerFile
}

/**
 * 获取aapt文件路径
 * @return
 */
def getAaptFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println "> Task :${project.name}:getAaptFile sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println "> Task :${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println "> Task :${project.name}:getAaptFile sdkDir : " + sdkDir
    if (sdkDir == null) {
        println "> Task :${project.name}:getAaptFile sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println "> Task :${project.name}:getAaptFile sdkDir is not exist"
        return null
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def aaptFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "aapt" + exe
    if (new File(aaptFile).exists()) {
        println "> Task :${project.name}:getAaptFile aaptFile : " + aaptFile
        return aaptFile
    }
    return null
}

/**
 * 读取apk中指定文件的内容
 * @param apkFile
 * @param filePath
 * @return
 */
def readContentFromApk(apkFile, filePath) {
    String content = null;
    try {
        ZipFile zipFile = new ZipFile(apkFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            content = builder.toString()
        }
        zipFile.close()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return content
}

def optimizeCommand(cmdString, delimiter = " ") {
    if (android.defaultConfig.ext.has("debug") && android.defaultConfig.ext["debug"]) {
        if (" ".equals(delimiter)) {
            return cmdString
        }
        return cmdString.replaceAll(",", " ")
    }
    try {
        List<String> list = Arrays.asList(cmdString.split(delimiter))
        List<String> list2 = new ArrayList<String>(list.size())
        for (int index = 0; index < list.size(); index++) {
            String s = list.get(index)
            File file = new File(s)
            if (file.exists()) {
                list2.add(file.getName())
            } else {
                list2.add(s)
            }
        }
        return list2.join(" ")
    } catch (Exception e) {
        e.printStackTrace()
    }
    return cmdString
}

class Aes {
    private static void appendHex(StringBuffer paramStringBuffer, byte paramByte) {
        paramStringBuffer.append(
                "0123456789ABCDEF".charAt(0xF & paramByte >> 4)).append(
                "0123456789ABCDEF".charAt(paramByte & 0xF));
    }

    static String decrypt(String key, String content) {
        try {
            String str = new String(decrypt(getRawKey(key.getBytes()),
                    toByte(content)));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt error: " + localException);
        }
        return null;
    }

    static byte[] decrypt(byte[] key,
                          byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(2, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static String decryptRaw(String seed, byte[] content) {
        try {
            String str = new String(
                    decrypt(getRawKey(seed.getBytes()), content));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt raw error: " + localException);
        }
        return null;
    }

    static String encryptPublic(String key, String content) {
        try {
            byte[] result = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return toHex(result);
        } catch (Exception localException) {
        }
        return null;
    }

    private static byte[] encrypt(byte[] key,
                                  byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(1, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static byte[] encryptRaw(String key, String content) {
        try {
            byte[] arrayOfByte = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return arrayOfByte;
        } catch (Exception localException) {
            System.out.println("encrypt raw error: " + localException);
        }
        return null;
    }

    static String fromHex(String content) {
        return new String(toByte(content));
    }

    private static byte[] getRawKey(byte[] key) throws Exception {
        byte[] arrayOfByte = new byte[16];
        if (key == null)
            throw new IllegalArgumentException("seed == null");
        if (key.length == 0)
            throw new IllegalArgumentException("seed.length == 0");
        if (key.length < 16) {
            int i = 0;
            while (i < arrayOfByte.length) {
                if (i < key.length) {
                    arrayOfByte[i] = key[i];
                } else {
                    arrayOfByte[i] = 0;
                }
                i++;
            }
        }
        return arrayOfByte;
    }

    static byte[] toByte(String content) {
        int i = content.length() / 2;
        byte[] arrayOfByte = new byte[i];
        for (int j = 0; j < i; j++)
            arrayOfByte[j] = Integer.valueOf(
                    content.substring(j * 2, 2 + j * 2), 16).byteValue();
        return arrayOfByte;
    }

    static String toHex(String content) {
        return toHex(content.getBytes());
    }

    static String toHex(byte[] content) {
        if (content == null)
            return "";
        StringBuffer localStringBuffer = new StringBuffer(
                2 * content.length);
        for (int i = 0; i < content.length; i++)
            appendHex(localStringBuffer, content[i]);
        return localStringBuffer.toString();
    }

    private static String readFromFile(File f) {
        if (!f.exists()) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        try {
            byte[] buf = new byte[4096];
            int read = 0;
            FileInputStream fis = new FileInputStream(f);
            while ((read = fis.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            fis.close();
            return builder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    private static void writeToFile(File f, String out) {
        try {
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(out.getBytes());
            fos.close();
        } catch (Exception e) {
        }
    }

    private static void usage() {
        String usage = "java -jar aes.jar <-k rawkey> [-e/-d] [-i input] [-o output] [-s str]";
        System.out.println(usage);
    }

    private static boolean isEmpty(String str) {
        if (str == null || str.trim().equals("")) {
            return true;
        }
        return false;
    }

    static String readFromStream(InputStream is) {
        if (is == null) {
            return null;
        }
        try {
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            return builder.toString();
        } catch (Exception e) {
            e.printStackTrace()
        }
        return null;
    }

    static String readLocal(String filePath) {
        try {
            InputStream is = new FileInputStream(filePath);
            return readFromStream(is);
        } catch (Exception e) {
        }
        return null;
    }

    static boolean isJson(String file) {
        try {
            String s = readLocal(file)
            if (s != null) {
                s = s.trim()
                if (s.startsWith("[") || s.startsWith("{")) {
                    return true
                }
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return false
    }

    static void encryptFile(String originFile, String secret) {
        try {
            String encrypt = encryptPublic(secret, readFromFile(new File(originFile))); //加密
            writeToFile(new File(originFile), encrypt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String byte2MD5(byte[] byteArray) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = md5Bytes[i] & 0xff;
            if (val < 16) {
                hexValue.append("0");
            }
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    static String string2MD5(String source) {
        return string2MD5(source, "utf-8");
    }

    static String string2MD5(String source, String encode) {
        try {
            return byte2MD5(source.getBytes(encode));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}