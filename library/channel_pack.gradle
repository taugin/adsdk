import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.nio.file.Files
import java.nio.file.Paths
import java.security.MessageDigest
import java.util.concurrent.TimeUnit
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

afterEvaluate {
// Windows
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)
            String assembleTaskName = String.format("assemble%sRelease", productFlavor)
            def aTask = project.tasks.findByName(assembleTaskName);
            if (aTask != null) {
                aTask.doLast {
                    generateMulChannel(flavor)
                    openReleaseDir(flavor.name)
                }
            }
        }
    } else {
        def aTask = project.tasks.findByName("assembleRelease");
        if (aTask != null) {
            aTask.doLast {
                generateMulChannel(null)
                openReleaseDir(null)
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant != null && variant.buildType.name == 'release') {
                def flavorObj = variant.productFlavors[0]
                parseChannelConfig(flavorObj, outputFile)
                def channelFileName = getChannelFileName(flavorObj != null ? flavorObj.name : null)
                println ":${project.name}:applicationVariants [" + (flavorObj != null ? flavorObj.name : "Default") + "] ChannelFileName : " + channelFileName
            }
        }
    }
}

/**
 * 生成多渠道包
 * @param flavor
 * @return
 */
def generateMulChannel(flavor) {
    def flavorName = "official"
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : null
    def channelFileName = android.defaultConfig.ext.has("channel_file_name") ? android.defaultConfig.ext.channel_file_name : null
    def channels_files = null
    if (flavor != null) {
        flavorName = flavor.name
        if (flavor.ext != null && flavor.ext.has("app_channels") && flavor.ext.app_channels != null) {
            channels = flavor.ext.app_channels
        }
        if (flavor.ext != null && flavor.ext.has("app_channels_files") && flavor.ext.app_channels_files != null) {
            channels_files = flavor.ext.app_channels_files
        }
        if (flavor.ext != null && flavor.ext.has("channel_file_name") && flavor.ext.channel_file_name != null) {
            channelFileName = flavor.ext.channel_file_name
        }
    } else {
        channels_files = android.defaultConfig.ext.has("app_channels_files") ? android.defaultConfig.ext.app_channels_files : null
    }
    if (channels == null || channels.isEmpty()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Channel Config is Empty"
        return
    }
    if (channels_files == null || channels_files.isEmpty()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Channel Files is Empty"
        return
    }
    def aaptFile = getAaptFile()
    if (aaptFile == null || !new File(aaptFile).exists()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] AaptFile is not exist"
        return
    }
    // 循环检测源文件是否存在，检测时间为5s内
    def basePackage = channels_files["base_package"]
    if (basePackage == null) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Base Package is Null"
        return
    }
    def startTime = System.currentTimeMillis()
    for (; ;) {
        File baseApk = new File(basePackage)
        def exist = baseApk.exists();
        if (!exist && System.currentTimeMillis() <= startTime + 5000) {
            sleep(1000)
        } else {
            break;
        }
    }
    File sourceFile = new File(basePackage)
    if (!sourceFile.exists()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Base Package is not exist"
        return
    }
    String releaseDir = new File(basePackage).getParent()
    println ":${project.name}:generateMulChannel [" + flavorName + "] Channel " + channels
    println ":${project.name}:generateMulChannel [" + flavorName + "] Channel ***********************************************************"
    channels.each {
        appendChannelsFile(basePackage, it, channels_files[it], releaseDir, flavorName, aaptFile, channelFileName)
        signChannelFile(flavorName, channels_files[it], aaptFile)
        println ":${project.name}:generateMulChannel [" + flavorName + "] Channel ***********************************************************\n"
    }
}

/**
 * 获取applicationId
 * @param flavor
 * @return
 */
def getApplicationId(flavor) {
    if (flavor == null || flavor.trim().length() == 0) {
        return project.android.defaultConfig.applicationId
    }
    def productFlavor = project.android.productFlavors[flavor]
    if (productFlavor.applicationId == null) {
        return project.android.defaultConfig.applicationId
    }
    return productFlavor.applicationId
}

def getChannelFileName(flavor) {
    def appId = getApplicationId(flavor)
    println ":${project.name}:getChannelFileName [" + flavor + "] Package Name : " + appId
    if (appId == null || appId.trim().length() == 0) {
        return null
    }
    def pkgMd5 = AesManager.string2MD5(appId)
    println ":${project.name}:getChannelFileName [" + flavor + "] Package MD5 : " + pkgMd5
    if (pkgMd5 == null || pkgMd5.trim().length() == 0) {
        return null
    }
    if (pkgMd5.length() < 8) {
        return null
    }
    pkgMd5 = pkgMd5.toLowerCase(Locale.default)
    def fileName = pkgMd5.substring(0, 8)
    return fileName + ".cnl"
}

/**
 * 增加渠道文件到assets目录，渠道文件名称为assets/product_channel_cfg
 * @param baseApk
 * @param channel
 * @param channelApk
 * @param releaseDir
 * @param flavorName
 * @param aaptFile
 * @return
 */
def appendChannelsFile(baseApk, channel, channelApk, releaseDir, flavorName, aaptFile, channelFileName) {
    println ":${project.name}:appendChannelsFile [" + flavorName + "] BaseApk [" + baseApk + "]"
    println ":${project.name}:appendChannelsFile [" + flavorName + "] Channel [" + channel + "] : " + new File(channelApk).getName()

    File tempAssets = new File(releaseDir, "assets")
    if (!tempAssets.exists()) {
        tempAssets.mkdirs()
    }
    if (channelFileName == null) {
        channelFileName = "product_channel_cfg"
    }
    File channelFile = new File(tempAssets, channelFileName)

    FileWriter writer = new FileWriter(channelFile, false)
    writer.write(channel)
    writer.close()
    Files.copy(Paths.get(baseApk), Paths.get(channelApk))
    def appendFileToApk = aaptFile + " a -v " + channelApk + " " + "assets/" + channelFileName
    def cwd = new File(baseApk).getParentFile()
    println ":${project.name}:appendChannelsFile [" + flavorName + "] Command [" + appendFileToApk + "]"
    println ":${project.name}:appendChannelsFile [" + flavorName + "] Current [" + cwd + "]"
    try {
        Process p = appendFileToApk.execute(null, cwd)
        p.waitFor(20, TimeUnit.SECONDS)
    } catch (Exception e) {
        e.printStackTrace()
    }
    channelFile.delete()
    tempAssets.delete()
}

/**
 * 解析渠道配置信息
 * @param flavorObj
 * @param outputFile
 * @return
 */
def parseChannelConfig(flavorObj, outputFile) {
    def flavorName = "official"
    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def appName = android.defaultConfig.ext.has("app_name") ? android.defaultConfig.ext.app_name : project.getRootProject().getName()
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : []
    def channels_files = null
    if (flavorObj != null) {
        flavorName = flavorObj.name
        if (flavorObj.versionName != null) {
            versionName = flavorObj.versionName
        }
        if (flavorObj.versionCode != null) {
            versionCode = flavorObj.versionCode
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_name") && flavorObj.ext.app_name != null) {
            appName = flavorObj.ext.app_name
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_channels") && flavorObj.ext.app_channels != null) {
            channels = flavorObj.ext.app_channels
        }
        channels_files = flavorObj.ext["app_channels_files"] = [:]
    } else {
        channels_files = android.defaultConfig.ext["app_channels_files"] = [:]
    }
    try {
        if (channels == null || channels.isEmpty()) {
            System.err.println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel " + channels
            return
        }
    } catch (Exception e) {
        return
    }
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel " + channels
    channels_files["base_package"] = outputFile.getAbsolutePath()
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel ========================================"
    channels.each {
        def tmpFile = appName + "_" + it + "_v" + versionName + "_" + versionCode +
                '_release' + "_" + getDate() + '.apk'
        def releaseDir = outputFile.getParentFile().getAbsolutePath()
        channels_files[it] = new File(releaseDir, tmpFile).getAbsolutePath()
        println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel [" + it + "] : " + new File(channels_files[it]).getName()
    }
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel ========================================"
    /*
    ////////////////////////////////////////////////////////////////////////////
    String releaseDir = new File(channels_files["official"]).getParent()
    File tempAssets = new File(releaseDir, "assets")
    if (!tempAssets.exists()) {
        tempAssets.mkdirs()
    }
    File channelFile = new File(tempAssets, "product_channel_cfg")
    channels.each {
        appendChannelFile(channels_files["official"], it, channels_files[it], channelFile)
    }
    channelFile.delete()
    tempAssets.delete()
    ////////////////////////////////////////////////////////////////////////////
     */
}

/**
 * 为渠道包签名
 * @param flavor
 * @param apkFile
 * @return
 */
def signChannelFile(flavor, apkFile, aaptFile) {
    def signConfig = getSignConfig(flavor)
    if (signConfig == null) {
        System.err.println ":${project.name}:signChannelPackage [" + flavor + "] signConfig is Null"
        return
    }
    if (!signConfig.hasProperty("storeFile")
            || !signConfig.hasProperty("storePassword")
            || !signConfig.hasProperty("keyAlias")
            || !signConfig.hasProperty("keyPassword")) {
        System.err.println ":${project.name}:signChannelPackage [" + flavor + "] signConfig is not completion"
        return
    }
    def jarSignerFile = getJarSigner(flavor)
    if (jarSignerFile == null) {
        System.err.println ":${project.name}:signChannelPackage [" + flavor + "] jarSignerFile is Null"
        return
    }
    if (deleteApkSignInfo(flavor, apkFile, aaptFile)) {
        signChannelFileInternal(flavor, apkFile, signConfig, jarSignerFile)
    }
}

/**
 * 删除旧的签名
 * @param flavor
 * @param apkFile
 * @return
 */
def deleteApkSignInfo(flavor, apkFile, aaptFile) {
    def signInfoList = getSignListByAapt(apkFile, flavor, aaptFile)
    println ":${project.name}:deleteApkSignInfo [" + flavor + "] SignDef " + signInfoList
    if (signInfoList == null || signInfoList.isEmpty()) {
        return true
    }
    signInfoList.each {
        def cmdList = aaptFile + " r -v " + apkFile + " " + it
        println ":${project.name}:deleteApkSignInfo [" + flavor + "] Command [" + cmdList + "]"
        try {
            def startTime = System.currentTimeMillis()
            Process p = cmdList.execute()
            p.waitFor(20, TimeUnit.SECONDS)
            def endTime =  System.currentTimeMillis()
            def signTime = (endTime - startTime) / 1000
            println ":${project.name}:signChannelPackage [" + flavor + "] Command [Delete Sign Info Use Time " + signTime + "s]"
        } catch (Exception e) {
        }
    }
    return true
}

/**
 * 读取apk中指定文件的内容
 * @param apkFile
 * @param filePath
 * @return
 */
def readContentFromApk(apkFile, filePath) {
    try {
        ZipFile zipFile = new ZipFile(apkFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        InputStream is = zipFile.getInputStream(zipEntry)
        StringBuilder builder = new StringBuilder();
        int read = 0;
        byte[] buf = new byte[1024];
        while ((read = is.read(buf)) > 0) {
            builder.append(new String(buf, 0, read));
        }
        is.close();
        return builder.toString();
    } catch (Exception e) {
    }
    return null
}

/**
 * 从apk中copy文件
 * @param apkFile
 * @param filePath
 * @param outputFile
 */
def copyFileFromApk(apkFile, String filePath, String outputFile) {

}

/**
 * 获取旧的签名文件
 * @param apkFile
 * @return
 */
def getSignListByAapt(apkFile, flavor, aaptFile) {
    def cmdString = aaptFile + " l -a " + apkFile
    println ":${project.name}:getSignListByAapt [" + flavor + "] Command [" + cmdString + "]"
    def result = cmdString.execute().text
    BufferedReader br = new BufferedReader(new StringReader(result))
    def signInfoList = []
    def line = null
    while((line = br.readLine()) != null) {
        if (line.startsWith("META-INF") && (line.endsWith(".MF") || line.endsWith(".SF") || line.endsWith(".RSA"))) {
            signInfoList.add(line)
        }
    }
    return signInfoList
}

/**
 * 对渠道包签名
 * @param flavor
 * @param apkFile
 * @return
 */
def signChannelFileInternal(flavor, apkFile, signConfig, jarSignerFile) {
    if (signConfig != null
            && signConfig.hasProperty("storeFile")
            && signConfig.hasProperty("storePassword")
            && signConfig.hasProperty("keyAlias")
            && signConfig.hasProperty("keyPassword")) {
        println ":${project.name}:signChannelPackage [" + flavor + "] ApkFile [" + apkFile + "]"
        def cmdlist = []
        cmdlist.add(jarSignerFile)

        cmdlist.add("-digestalg")
        cmdlist.add("SHA1")
        cmdlist.add("-sigalg")
        cmdlist.add("MD5withRSA")
        // cmdlist.add("-tsa https://timestamp.geotrust.com/tsa")
        cmdlist.add("-keystore")
        cmdlist.add(signConfig.storeFile)
        cmdlist.add("-storepass")
        cmdlist.add(signConfig.storePassword)
        cmdlist.add("-keypass")
        cmdlist.add(signConfig.keyPassword)
        cmdlist.add("-signedjar")
        cmdlist.add(apkFile)
        cmdlist.add(apkFile)
        cmdlist.add(signConfig.keyAlias)

        def cmdString = cmdlist.join(" ")
        println ":${project.name}:signChannelPackage [" + flavor + "] Command [" + cmdString + "]"
        try {
            def startTime =  System.currentTimeMillis()
            Process p = cmdString.execute()
            p.waitFor(20, TimeUnit.SECONDS)
            def endTime =  System.currentTimeMillis()
            def signTime = (endTime - startTime) / 1000
            println ":${project.name}:signChannelPackage [" + flavor + "] Command [Sign Apk Use Time " + signTime + "s]"
        } catch (Exception e) {
        }
    }
}

/**
 * 获取Jarsigner文件路径
 * @param flavor
 * @return
 */
def getJarSigner(flavor) {
    def jarSignerFile = null
    try {
        def cmdString = "which jarsigner"
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            cmdString = "where jarsigner"
        }
        def result = cmdString.execute().text.trim()
        if (result != null && result.length() > 0) {
            BufferedReader br = new BufferedReader(new StringReader(result))
            def tmpFile = br.readLine()
            br.close()
            println ":${project.name}:getJarSignerFile [" + flavor + "] jarSignerFile [" + tmpFile + "]"
            File f = new File(tmpFile)
            if (f.exists()) {
                jarSignerFile = tmpFile
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return jarSignerFile
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getSignConfig(flavor) {
    def signConfig = null
    if (flavor != null) {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}

/**
 * 获取aapt文件路径
 * @return
 */
def getAaptFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println ":${project.name}:getAaptFile sdkDir : " + sdkDir
    if (sdkDir == null) {
        println ":${project.name}:getAaptFile sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println ":${project.name}:getAaptFile sdkDir is not exist"
        return null
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def aaptFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "aapt" + exe
    println ":${project.name}:getAaptFile aaptFile : " + aaptFile
    return aaptFile
}

def toUpperCaseFirstOne(String s) {
    if (s == null) {
        return null
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    }
    return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
}

def openReleaseDir(flavor) {
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return
    }
    try {
        def outputDir = String.format("outputs/apk/%srelease", ((flavor != null && flavor.trim().length() > 0) ? flavor + "/" : ""))
        def outputPath = new File(project.buildDir, outputDir)
        def cmd = "explorer.exe " + outputPath
        cmd.execute()
        println ":${project.name}:openReleaseDir [${outputPath}]"
    } catch (Exception e) {
    }
}

class AesManager {
    private static void appendHex(StringBuffer paramStringBuffer, byte paramByte) {
        paramStringBuffer.append(
                "0123456789ABCDEF".charAt(0xF & paramByte >> 4)).append(
                "0123456789ABCDEF".charAt(paramByte & 0xF));
    }

    static String decrypt(String key, String content) {
        try {
            String str = new String(decrypt(getRawKey(key.getBytes()),
                    toByte(content)));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt error: " + localException);
        }
        return null;
    }

    static byte[] decrypt(byte[] key,
                          byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(2, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static String decryptRaw(String seed, byte[] content) {
        try {
            String str = new String(
                    decrypt(getRawKey(seed.getBytes()), content));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt raw error: " + localException);
        }
        return null;
    }

    static String encryptPublic(String key, String content) {
        try {
            byte[] result = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return toHex(result);
        } catch (Exception localException) {
        }
        return null;
    }

    private static byte[] encrypt(byte[] key,
                                  byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(1, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static byte[] encryptRaw(String key, String content) {
        try {
            byte[] arrayOfByte = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return arrayOfByte;
        } catch (Exception localException) {
            System.out.println("encrypt raw error: " + localException);
        }
        return null;
    }

    static String fromHex(String content) {
        return new String(toByte(content));
    }

    private static byte[] getRawKey(byte[] key) throws Exception {
        byte[] arrayOfByte = new byte[16];
        if (key == null)
            throw new IllegalArgumentException("seed == null");
        if (key.length == 0)
            throw new IllegalArgumentException("seed.length == 0");
        if (key.length < 16) {
            int i = 0;
            while (i < arrayOfByte.length) {
                if (i < key.length) {
                    arrayOfByte[i] = key[i];
                } else {
                    arrayOfByte[i] = 0;
                }
                i++;
            }
        }
        return arrayOfByte;
    }

    static byte[] toByte(String content) {
        int i = content.length() / 2;
        byte[] arrayOfByte = new byte[i];
        for (int j = 0; j < i; j++)
            arrayOfByte[j] = Integer.valueOf(
                    content.substring(j * 2, 2 + j * 2), 16).byteValue();
        return arrayOfByte;
    }

    static String toHex(String content) {
        return toHex(content.getBytes());
    }

    static String toHex(byte[] content) {
        if (content == null)
            return "";
        StringBuffer localStringBuffer = new StringBuffer(
                2 * content.length);
        for (int i = 0; i < content.length; i++)
            appendHex(localStringBuffer, content[i]);
        return localStringBuffer.toString();
    }

    private static String readFromFile(File f) {
        if (!f.exists()) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        try {
            byte[] buf = new byte[4096];
            int read = 0;
            FileInputStream fis = new FileInputStream(f);
            while ((read = fis.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            fis.close();
            return builder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    private static void writeToFile(File f, String out) {
        try {
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(out.getBytes());
            fos.close();
        } catch (Exception e) {
        }
    }

    private static void usage() {
        String usage = "java -jar aes.jar <-k rawkey> [-e/-d] [-i input] [-o output] [-s str]";
        System.out.println(usage);
    }

    private static boolean isEmpty(String str) {
        if (str == null || str.trim().equals("")) {
            return true;
        }
        return false;
    }

    static String readFromStream(InputStream is) {
        if (is == null) {
            return null;
        }
        try {
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            return builder.toString();
        } catch (Exception e) {
            e.printStackTrace()
        }
        return null;
    }

    static String readLocal(String filePath) {
        try {
            InputStream is = new FileInputStream(filePath);
            return readFromStream(is);
        } catch (Exception e) {
        }
        return null;
    }

    static boolean isJson(String file) {
        try {
            String s = readLocal(file)
            if (s != null) {
                s = s.trim()
            }
            if (s.startsWith("[") || s.startsWith("{")) {
                return true
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return false
    }

    static void encryptFile(String originFile, String secret) {
        try {
            String encrypt = encryptPublic(secret, readFromFile(new File(originFile))); //加密
            writeToFile(new File(originFile), encrypt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String byte2MD5(byte[] byteArray) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = md5Bytes[i] & 0xff;
            if (val < 16) {
                hexValue.append("0");
            }
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    static String string2MD5(String source) {
        return string2MD5(source, "utf-8");
    }

    static String string2MD5(String source, String encode) {
        try {
            return byte2MD5(source.getBytes(encode));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}